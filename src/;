// use std::env;
use paper_backup::lib::*;
use colored::Colorize;
use std::process::{Command, Stdio};

fn diceware_generate<'a>(input: &'a str) -> Vec<&'a str> {
    let diceware = Command::new("diceware")
        .args(&["-d", "-","-e","-n", input,"-l","minilock"])
        .stdout(Stdio::piped())
        .output()
        .expect("Failed to execute diceware");
    
    let dice = String::from_utf8_lossy(&diceware.stdout);

    let dice_split = dice.split("\n");

    let dice_vec: Vec<&str> = dice_split.collect();

    dice_vec
}

fn main() {
    // paper_backup::lib::hello();
    
    // for args in env::args() {
    //     println!("{}", args);
    // }
    
    let _gen_eff = generate_eff_word();

    // println!("Output: {}", _gen_eff);

    println!("\neff-wordlist");
    println!("-------------");
    println!("\n{}{}\n","Output: ".green(),  _gen_eff);
    
    println!("\ndiceware");
    println!("----------");
    

    // println!("{}{:?}\n","Output: ".green(),  dice);
    let out  = diceware_generate("15");
    println!("\n{}{:?}\n", "Stdout: ".green(), out);

    // let menu = Menu::Help;

    // match menu {
    //     Menu::Help => get_help(),
    // }
}

